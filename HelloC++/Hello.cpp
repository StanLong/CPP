#include <iostream>
 
using namespace std;
 
// 主函数
int main(int argc, char *argv[])
{	
	int a = 10;

	// 1. 指针的定义
	// 指针定义的语法:  数据顾炎武 * 指针变量名
	int * p;

	//  &是取址符号， &a 表示取到变量a的内存地址
	p = &a;

	// printf(&a);
	// printf(p);
	cout << "a的地址为: " << &a << endl; // a的地址为: 0x61fe44


	// 2. 指针的使用
	// 指针前加 * 代表引用， 代表指针指向内存中的数据
	*p = 100;
	cout << "a=" << a << endl; // a=100

	// 3. 指针所占用的内存空间
	// 以 int * p 为例， 在32位操作系统下占用32个字节，在64位操作系统下占用64个字节
	cout << "整型指针占用的内存空间大小 = " << sizeof(p) << endl;

	// 4. 空指针和野指针
	// 空指针： 指针变更指向内存中编号为0的内存空间 int * p = NULL;
	// 用途： 初始化指针变量
	// 注意： 空指针指向的内存是不可以访问的
	// 野指针： 指针变量指向非法的内存空间  int * p = (int *)0x1100;

	// 5. const 修饰指针
	// const 修饰的指针有三种情况
	// 1. const 修饰指针 -- 常量指针  const int * p = &a; 
	//    特点：指针的指向可以修改， 但指针指向的值不可以修改
	// 2. const 修饰常量  -- 指针常量  int * const p = &a
	//    特点： 指针的指向不可以改，但是指针指向的值可以改
	// 3. const 即修饰指针，又修饰常量
	//    特点： 指针的指向和指针指向的值都不可以修改

	// 6. 指针和数组
	// 利用指针访问数组中的元素
	int arr[] = {1,2,3,4,5,6,7,8,9,10};
	int * pa = arr; // arr 就是数组的首地址
	cout << "利用指针访问数组中的第一个元素: " << *pa << endl;
	pa++; // 让指针往后偏移8个字节
	cout << "利用指针访问数组中的第一个元素: " << *pa << endl;

	// 使用指针遍历数组
	int * pb = arr;
	for(int i=0; i<10; i++)
	{
		cout << "指针访问数组中的第" << i << "个元素: " << *pb << endl;
		pb++;
	}






}